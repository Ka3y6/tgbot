import logging
from io import BytesIO
import asyncio
import requests
from bs4 import BeautifulSoup
from deep_translator import GoogleTranslator

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from config import TELEGRAM_TOKEN
from wallet.eth import create_wallet, get_wallet, send_eth
import qrcode
from apscheduler.schedulers.background import BackgroundScheduler
from finance_ai.data_fetch import update_prices, update_news, backfill_prices
from db.models import SessionLocal, Price, News, Forecast
from finance_ai.analysis import analyze_unlabeled_news, build_forecast

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.DEBUG
)
logging.getLogger("apscheduler").setLevel(logging.DEBUG)
logger = logging.getLogger(__name__)


def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return ReplyKeyboardMarkup(
        [
            ["üëõ Wallet", "üìà Rates"],
            ["üì∞ News", "üîÆ Forecast"],
            ["‚ÑπÔ∏è Help"],
        ],
        resize_keyboard=True,
    )


def get_model_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏."""
    return ReplyKeyboardMarkup(
        [[model] for model in MODELS.keys()] + [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True
    )


# ---------- –ù–æ–≤—ã–π –±–ª–æ–∫: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞ ---------- #


def get_wallet_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º."""
    return ReplyKeyboardMarkup(
        [
            ["üí∞ Balance", "‚ûï Deposit"],
            ["üí∏ Withdraw", "üìú History"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
        ],
        resize_keyboard=True,
    )


# ---------- Helper: parse & translate news ---------- #

async def _fetch_and_translate(url: str, summary_en: str | None = None, max_chars: int = 400) -> tuple[str, str]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—å—é, –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (title_ru, snippet_ru). –ü—Ä–∏ –æ—à–∏–±–∫–µ ‚Äì –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏."""

    def _worker() -> tuple[str, str]:
        try:
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                "(KHTML, like Gecko) Chrome/124.0 Safari/537.36"
            }
            resp = requests.get(url, headers=headers, timeout=10)
            resp.raise_for_status()

            soup = BeautifulSoup(resp.text, "html.parser")

            title_en = soup.title.string.strip() if soup.title and soup.title.string else ""

            paragraphs = [p.get_text(" ", strip=True) for p in soup.find_all("p")]
            body_en = " ".join(paragraphs) or (summary_en or "")
            body_en = body_en[:max_chars]

            translator = GoogleTranslator(source="auto", target="ru")

            title_ru = translator.translate(title_en) if title_en else ""
            snippet_ru = translator.translate(body_en) if body_en else ""

            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º summary
            if not snippet_ru and summary_en:
                try:
                    translator = GoogleTranslator(source="auto", target="ru")
                    snippet_ru = translator.translate(summary_en[:max_chars])
                except Exception:
                    pass

            return title_ru, snippet_ru
        except Exception as exc:
            logger.exception("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞/–ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–æ–≤–æ—Å—Ç–∏ %s: %s", url, exc)
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ summary_en –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if summary_en:
                try:
                    translator = GoogleTranslator(source="auto", target="ru")
                    snippet_ru = translator.translate(summary_en[:max_chars])
                    return "", snippet_ru
                except Exception:
                    pass
            return "", ""

    return await asyncio.to_thread(_worker)


# ---------- Handlers ---------- #


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏."""

    await update.message.reply_text(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
        reply_markup=get_main_keyboard(),
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""

    user_message = update.message.text.strip()

    # --- –ö–æ–º–∞–Ω–¥—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã --- #
    if user_message == "‚ÑπÔ∏è Help":
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/createwallet <pwd> ‚Äì —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—ë–∫\n"
            "/wallet ‚Äì –±–∞–ª–∞–Ω—Å\n"
            "/deposit ‚Äì –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–π QR\n"
            "/withdraw <amt> <to> <pwd> ‚Äì –≤—ã–≤–æ–¥ ETH\n"
            "/history ‚Äì –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
            "/rates ‚Äì —Ü–µ–Ω—ã BTC/ETH\n"
            "/news ‚Äì —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
            "/forecast ‚Äì –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω",
            reply_markup=get_main_keyboard(),
        )
        return
    elif user_message == "üëõ Wallet":
        await wallet_cmd(update, context)
        return
    elif user_message == "üìà Rates":
        await rates_cmd(update, context)
        return
    elif user_message == "üì∞ News":
        await news_cmd(update, context)
        return
    elif user_message == "üîÆ Forecast":
        await forecast_cmd(update, context)
        return
    # --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞ --- #
    elif user_message == "üí∞ Balance":
        await wallet_cmd(update, context)
        return
    elif user_message == "‚ûï Deposit":
        await deposit_cmd(update, context)
        return
    elif user_message == "üí∏ Withdraw":
        # –î–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—É–º–º–∞, –∞–¥—Ä–µ—Å –∏ –ø–∞—Ä–æ–ª—å ‚Äì –ø–æ–¥—Å–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–æ—Ä–º–∞—Ç
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/withdraw <amount_eth> <to_address> <password>",
            reply_markup=get_wallet_keyboard(),
        )
        return
    elif user_message == "üìú History":
        await history_cmd(update, context)
        return
    elif user_message == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard()
        )
        return

    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –∏–≥–Ω–æ—Ä
    return


async def create_wallet_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/createwallet <–ø–∞—Ä–æ–ª—å> ‚Äì –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫."""
    if get_wallet(update.effective_user.id):
        await update.message.reply_text("–ö–æ—à–µ–ª—ë–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wallet —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å.")
        return

    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: /createwallet <–ø–∞—Ä–æ–ª—å>")
        return

    password = context.args[0]
    info = create_wallet(update.effective_user.id, password)
    await update.message.reply_text(
        f"‚úÖ –ö–æ—à–µ–ª—ë–∫ —Å–æ–∑–¥–∞–Ω!\n–ê–¥—Ä–µ—Å: {info.address}\n" "–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å ‚Äî –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤."
    )


async def wallet_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/wallet ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –∏ –±–∞–ª–∞–Ω—Å."""
    info = get_wallet(update.effective_user.id)
    if not info:
        await update.message.reply_text(
            "–ö–æ—à–µ–ª—ë–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /createwallet <–ø–∞—Ä–æ–ª—å>.",
            reply_markup=get_main_keyboard(),
        )
        return

    await update.message.reply_text(
        f"–í–∞—à –∞–¥—Ä–µ—Å: {info.address}\n–ë–∞–ª–∞–Ω—Å: {info.balance_eth:.6f} ETH",
        reply_markup=get_wallet_keyboard(),
    )


async def deposit_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/deposit ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç QR-–∫–æ–¥ –∞–¥—Ä–µ—Å–∞."""
    info = get_wallet(update.effective_user.id)
    if not info:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª—ë–∫: /createwallet <–ø–∞—Ä–æ–ª—å>.")
        return

    qr = qrcode.make(info.address)
    bio = BytesIO()
    qr.save(bio, format="PNG")
    bio.seek(0)
    await update.message.reply_photo(photo=bio, caption=f"–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {info.address}")


async def withdraw_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/withdraw <amount_eth> <to_address> <password> ‚Äì –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤."""
    if len(context.args) < 3:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /withdraw <amount> <address> <password>")
        return

    amount_str, to_address, password = context.args[:3]
    try:
        amount = float(amount_str)
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    try:
        tx_hash = send_eth(update.effective_user.id, to_address, amount, password)
        await update.message.reply_text(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. Hash: {tx_hash}")
    except Exception as exc:
        logger.exception("–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤: %s", exc)
        await update.message.reply_text(f"‚ö†Ô∏è {exc}")


async def history_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/history ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""
    from db.models import SessionLocal, Transaction

    with SessionLocal() as session:
        txs = (
            session.query(Transaction)
            .filter(Transaction.user_id == update.effective_user.id)
            .order_by(Transaction.timestamp.desc())
            .limit(5)
            .all()
        )

    if not txs:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    lines = [f"{tx.direction} {tx.amount_eth} ETH ‚Äì {tx.tx_hash[:10]}‚Ä¶" for tx in txs]
    await update.message.reply_text("\n".join(lines))


async def rates_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/rates ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã BTC –∏ ETH."""
    with SessionLocal() as session:
        lines = []
        for coin in ["bitcoin", "ethereum"]:
            latest = (
                session.query(Price)
                .filter(Price.coin == coin)
                .order_by(Price.timestamp.desc())
                .first()
            )
            if latest:
                price_val = float(latest.price_usd)
                lines.append(f"{coin.capitalize()}: ${price_val:.2f}")
        if lines:
            await update.message.reply_text("\n".join(lines))
        else:
            await update.message.reply_text("–¶–µ–Ω—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç‚Ä¶")


async def news_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/news ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 3 —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–∫—Ä–∞—Ç–∫–æ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –±–µ–∑ —Å—Å—ã–ª–æ–∫)."""

    with SessionLocal() as session:
        items = (
            session.query(News).order_by(News.published_at.desc()).limit(3).all()
        )

    if not items:
        await update.message.reply_text("–ù–æ–≤–æ—Å—Ç–∏ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    messages: list[str] = []
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å gather –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏)
    for n in items:
        title_ru, snippet_ru = await _fetch_and_translate(n.url, n.summary)
        if not title_ru:
            title_ru = n.title  # fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª
        msg_parts = [title_ru]
        if snippet_ru:
            msg_parts.append(snippet_ru)
        messages.append("\n\n".join(msg_parts))

    await update.message.reply_text("\n\n‚Äï ‚Äï ‚Äï\n\n".join(messages))


async def forecast_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/forecast ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π –¥–ª—è BTC –∏ ETH."""
    with SessionLocal() as session:
        coins = ["bitcoin", "ethereum"]
        lines = []
        for coin in coins:
            forecasts = (
                session.query(Forecast)
                .filter(Forecast.coin == coin)
                .order_by(Forecast.target_date)
                .all()
            )
            if not forecasts:
                continue
            lines.append(f"–ü—Ä–æ–≥–Ω–æ–∑ {coin.capitalize()}:")
            for fc in forecasts:
                lines.append(f"{fc.target_date}: ${float(fc.price_usd):.2f}")
            lines.append("")
        if lines:
            await update.message.reply_text("\n".join(lines))
        else:
            await update.message.reply_text("–ü—Ä–æ–≥–Ω–æ–∑—ã –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")


# ---------- Application bootstrap ---------- #

def run_bot() -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # Command handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("createwallet", create_wallet_cmd))
    app.add_handler(CommandHandler("wallet", wallet_cmd))
    app.add_handler(CommandHandler("deposit", deposit_cmd))
    app.add_handler(CommandHandler("withdraw", withdraw_cmd))
    app.add_handler(CommandHandler("history", history_cmd))
    app.add_handler(CommandHandler("rates", rates_cmd))
    app.add_handler(CommandHandler("news", news_cmd))
    app.add_handler(CommandHandler("forecast", forecast_cmd))

    # Reply-keyboard buttons handler
    # Any other text
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Scheduler for data fetch
    scheduler = BackgroundScheduler()

    def prices_job():
        logger.debug("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ prices_job")
        with SessionLocal() as session:
            update_prices(session)
        logger.debug("prices_job –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def news_job():
        logger.debug("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ news_job")
        with SessionLocal() as session:
            update_news(session)
        logger.debug("news_job –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def sentiment_job():
        logger.debug("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ sentiment_job")
        with SessionLocal() as session:
            analyze_unlabeled_news(session)
        logger.debug("sentiment_job –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def forecast_job():
        logger.debug("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ forecast_job")
        with SessionLocal() as session:
            for coin in ["bitcoin", "ethereum"]:
                build_forecast(session, coin)
        logger.debug("forecast_job –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    # --- –ø–æ–¥–≥—Ä—É–∂–∞–µ–º 90-–¥–Ω–µ–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ ---
    with SessionLocal() as s:
        for coin in ["bitcoin", "ethereum"]:
            backfill_prices(s, coin)

    # --- –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–æ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
    prices_job()
    news_job()
    sentiment_job()
    forecast_job()

    # –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    scheduler.add_job(prices_job, "interval", minutes=2)
    scheduler.add_job(news_job, "interval", minutes=10)
    scheduler.add_job(sentiment_job, "interval", minutes=10)
    scheduler.add_job(forecast_job, "cron", minute=0)  # –∫–∞–∂–¥—ã–π —á–∞—Å –≤ 00 –º–∏–Ω—É—Ç

    scheduler.start()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è‚Ä¶")
    app.run_polling()


if __name__ == "__main__":
    run_bot() 