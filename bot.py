import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
import requests
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "7590795767:AAE-_qp2Ajkd_MVIVc9Q963FSCEp-YT6aSo"
OPENROUTER_API_KEY = "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"
STABILITY_API_KEY = "sk-6gniSvAdfLZRmhpfC3Pjzzl7KkXkvBSOyATCfb5RwCcxnsov"

# –ú–æ–¥–µ–ª–∏
MODELS = {
    "DeepSeek Prover": "deepseek/deepseek-prover-v2:free",
    "Llama 4 Scout": "meta-llama/llama-4-scout:free",
    "GPT-4 Turbo": "openai/gpt-4-turbo-preview"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            ["üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", "üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"],
            ["üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
        ],
        resize_keyboard=True
    )

def get_model_keyboard():
    return ReplyKeyboardMarkup(
        [[model] for model in MODELS.keys()] + [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.setdefault("chat_history", [])
    context.user_data.setdefault("settings", {"temperature": 0.7})
    await update.message.reply_text(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø AI-–±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        reply_markup=get_model_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()

    if user_message == "üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç":
        context.user_data["chat_history"] = []
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return
    elif user_message == "üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=get_model_keyboard())
        return
    elif user_message == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫\n"
            "/img - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "üßπ - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            reply_markup=get_main_keyboard()
        )
        return
    elif user_message == "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /img –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
        return

    if "selected_model" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å!", reply_markup=get_model_keyboard())
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI
    context.user_data["chat_history"].append({"role": "user", "content": user_message})

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": MODELS[context.user_data["selected_model"]],
                "messages": context.user_data["chat_history"],
                "temperature": context.user_data["settings"]["temperature"]
            }
        )
        response.raise_for_status()
        ai_response = response.json()["choices"][0]["message"]["content"]
        await update.message.reply_text(ai_response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        prompt = " ".join(context.args)
        if not prompt:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: /img –∑–∞–∫–∞—Ç –Ω–∞ –º–æ—Ä–µ")
            return

        await update.message.reply_text("üñåÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

        response = requests.post(
            "https://api.stability.ai/v2beta/stable-image/generate/sd3",
            headers={
                "Authorization": f"Bearer {STABILITY_API_KEY}",
                "Accept": "image/*"
            },
            files={"none": ''},
            data={
                "prompt": prompt,
                "output_format": "jpeg"
            },
            timeout=60
        )

        response.raise_for_status()
        await update.message.reply_photo(
            photo=BytesIO(response.content),
            caption=f"üñºÔ∏è {prompt}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

async def handle_model_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_model = update.message.text.strip()

    if selected_model == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
        return

    if selected_model not in MODELS:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_model_keyboard())
        return

    context.user_data["selected_model"] = selected_model
    await update.message.reply_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_model}",
        reply_markup=get_main_keyboard()
    )

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("img", generate_image))

    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.Regex(f"^({'|'.join(MODELS.keys())}|‚¨ÖÔ∏è –ù–∞–∑–∞–¥)$"),
        handle_model_selection
    ))

    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_message
    ))

    app.run_polling()

if __name__ == "__main__":
    main()